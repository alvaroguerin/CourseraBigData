Apache Hadoop is an open-source software framework written in Java for distributed storage and distributed processing of very large data sets on computer clusters built from commodity hardware. All the modules in Hadoop are designed with a fundamental assumption that hardware failures are common and should be automatically handled by the framework.[3]

The core of Apache Hadoop consists of a storage part, known as Hadoop Distributed File System (HDFS), and a processing part called MapReduce. Hadoop splits files into large blocks and distributes them across nodes in a cluster. To process data, Hadoop transfers packaged code for nodes to process in parallel based on the data that needs to be processed. This approach takes advantage of data locality[4]— nodes manipulating the data they have access to— to allow the dataset to be processed faster and more efficiently than it would be in a more conventional supercomputer architecture that relies on a parallel file system where computation and data are distributed via high-speed networking.[5]

The base Apache Hadoop framework is composed of the following modules:

    Hadoop Common – contains libraries and utilities needed by other Hadoop modules;
    Hadoop Distributed File System (HDFS) – a distributed file-system that stores data on commodity machines, providing very high aggregate bandwidth across the cluster;
    Hadoop YARN – a resource-management platform responsible for managing computing resources in clusters and using them for scheduling of users' applications;[6][7] and
    Hadoop MapReduce – an implementation of the MapReduce programming model for large scale data processing.

The term Hadoop has come to refer not just to the base modules above, but also to the ecosystem,[8] or collection of additional software packages that can be installed on top of or alongside Hadoop, such as Apache Pig, Apache Hive, Apache HBase, Apache Phoenix, Apache Spark, Apache ZooKeeper, Cloudera Impala, Apache Flume, Apache Sqoop, Apache Oozie, Apache Storm.[9]

Apache Hadoop's MapReduce and HDFS components were inspired by Google papers on their MapReduce and Google File System.[10]





History

Hadoop was created by Doug Cutting and Mike Cafarella[12] in 2005. Cutting,
who was working at Yahoo! at the time,[13] named it after his son's toy
elephant.[14] It was originally developed to support distribution for the
Nutch search engine project.[15]
Architecture
See also: Hadoop Distributed File System, Apache HBase and MapReduce

Hadoop consists of the Hadoop Common package, which provides filesystem and OS
level abstractions, a MapReduce engine (either MapReduce/MR1 or YARN/MR2)[16]
and the Hadoop Distributed File System (HDFS). The Hadoop Common package
contains the necessary Java ARchive (JAR) files and scripts needed to start
Hadoop.

For effective scheduling of work, every Hadoop-compatible file system should
provide location awareness: the name of the rack (more precisely, of the
network switch) where a worker node is. Hadoop applications can use this
information to execute code on the node where the data is, and, failing that,
on the same rack/switch to reduce backbone traffic. HDFS uses this method when
replicating data for data redundancy across multiple racks. This approach
reduces the impact of a rack power outage or switch failure; if one of these
hardware failures occurs, the data will remain available.[17]
Hadoop cluster
A multi-node Hadoop cluster

A small Hadoop cluster includes a single master and multiple worker nodes. The
master node consists of a Job Tracker, Task Tracker, NameNode, and DataNode. A
slave or worker node acts as both a DataNode and TaskTracker, though it is
possible to have data-only worker nodes and compute-only worker nodes. These
are normally used only in nonstandard applications.[18]

Hadoop requires Java Runtime Environment (JRE) 1.6 or higher. The standard
startup and shutdown scripts require that Secure Shell (ssh) be set up between
nodes in the cluster.[19]

In a larger cluster, HDFS nodes are managed through a dedicated NameNode
server to host the file system index, and a secondary NameNode that can
generate snapshots of the namenode's memory structures, thereby preventing
file-system corruption and loss of data. Similarly, a standalone JobTracker
server can manage job scheduling across nodes. When Hadoop MapReduce is used
with an alternate file system, the NameNode, secondary NameNode, and DataNode
architecture of HDFS are replaced by the file-system-specific equivalents.
File systems
Hadoop distributed file system

The Hadoop distributed file system (HDFS) is a distributed, scalable, and
portable file-system written in Java for the Hadoop framework. A Hadoop
cluster has nominally a single namenode plus a cluster of datanodes, although
redundancy options are available for the namenode due to its criticality. Each
datanode serves up blocks of data over the network using a block protocol
specific to HDFS. The file system uses TCP/IP sockets for communication.
Clients use remote procedure call (RPC) to communicate between each other.

HDFS stores large files (typically in the range of gigabytes to terabytes[20])
across multiple machines. It achieves reliability by replicating the data
across multiple hosts, and hence theoretically does not require RAID storage
on hosts (but to increase I/O performance some RAID configurations are still
useful). With the default replication value, 3, data is stored on three nodes:
two on the same rack, and one on a different rack. Data nodes can talk to each
other to rebalance data, to move copies around, and to keep the replication of
data high. HDFS is not fully POSIX-compliant, because the requirements for a
POSIX file-system differ from the target goals for a Hadoop application. The
trade-off of not having a fully POSIX-compliant file-system is increased
performance for data throughput and support for non-POSIX operations such as
Append.[21]

HDFS added the high-availability capabilities, as announced for release 2.0 in
May 2012,[22] letting the main metadata server (the NameNode) fail over
manually to a backup. The project has also started developing automatic
fail-over.

The HDFS file system includes a so-called secondary namenode, a misleading
name that some might incorrectly interpret as a backup namenode for when the
primary namenode goes offline. In fact, the secondary namenode regularly
connects with the primary namenode and builds snapshots of the primary
namenode's directory information, which the system then saves to local or
remote directories. These checkpointed images can be used to restart a failed
primary namenode without having to replay the entire journal of file-system
actions, then to edit the log to create an up-to-date directory structure.
Because the namenode is the single point for storage and management of
metadata, it can become a bottleneck for supporting a huge number of files,
especially a large number of small files. HDFS Federation, a new addition,
aims to tackle this problem to a certain extent by allowing multiple
namespaces served by separate namenodes.

An advantage of using HDFS is data awareness between the job tracker and task
tracker. The job tracker schedules map or reduce jobs to task trackers with an
awareness of the data location. For example: if node A contains data (x,y,z)
and node B contains data (a,b,c), the job tracker schedules node B to perform
map or reduce tasks on (a,b,c) and node A would be scheduled to perform map or
reduce tasks on (x,y,z). This reduces the amount of traffic that goes over the
network and prevents unnecessary data transfer. When Hadoop is used with other
file systems, this advantage is not always available. This can have a
significant impact on job-completion times, which has been demonstrated when
running data-intensive jobs.[23]

HDFS was designed for mostly immutable files[21] and may not be suitable for
systems requiring concurrent write-operations.

HDFS can be mounted directly with a Filesystem in Userspace (FUSE) virtual
file system on Linux and some other Unix systems.

File access can be achieved through the native Java application programming
interface (API), the Thrift API to generate a client in the language of the
users' choosing (C++, Java, Python, PHP, Ruby, Erlang, Perl, Haskell, C#,
Cocoa, Smalltalk, and OCaml), the command-line interface, browsed through the
HDFS-UI Web application (webapp) over HTTP, or via 3rd-party network client
libraries.[24]
Other file systems

Hadoop works directly with any distributed file system that can be mounted by
the underlying operating system simply by using a file:// URL; however, this
comes at a price: the loss of locality. To reduce network traffic, Hadoop
needs to know which servers are closest to the data; this is information that
Hadoop-specific file system bridges can provide.

In May 2011, the list of supported file systems bundled with Apache Hadoop
were:

    HDFS: Hadoop's own rack-aware file system.[25] This is designed to scale
to tens of petabytes of storage and runs on top of the file systems of the
underlying operating systems.
    FTP File system: this stores all its data on remotely accessible FTP
servers.
    Amazon S3 (Simple Storage Service) file system. This is targeted at
clusters hosted on the Amazon Elastic Compute Cloud server-on-demand
infrastructure. There is no rack-awareness in this file system, as it is all
remote.
    Windows Azure Storage Blobs (WASB) file system. WASB, an extension on top
of HDFS, allows distributions of Hadoop to access data in Azure blob stores
without moving the data permanently into the cluster.

A number of third-party file system bridges have also been written, none of
which are currently in Hadoop distributions. However, some commercial
distributions of Hadoop ship with an alternative filesystem as the
default—specifically IBM and MapR.

    In 2009, IBM discussed running Hadoop over the IBM General Parallel File
System.[26] The source code was published in October 2009.[27]
    In April 2010, Parascale published the source code to run Hadoop against
the Parascale file system.[28]
    In April 2010, Appistry released a Hadoop file system driver for use with
its own CloudIQ Storage product.[29]
    In June 2010, HP discussed a location-aware IBRIX Fusion file system
driver.[30]
    In May 2011, MapR Technologies, Inc. announced the availability of an
alternative file system for Hadoop, which replaced the HDFS file system with a
full random-access read/write file system.

JobTracker and TaskTracker: the MapReduce engine
Main article: MapReduce

Above the file systems comes the MapReduce Engine, which consists of one
JobTracker, to which client applications submit MapReduce jobs. The JobTracker
pushes work out to available TaskTracker nodes in the cluster, striving to
keep the work as close to the data as possible. With a rack-aware file system,
the JobTracker knows which node contains the data, and which other machines
are nearby. If the work cannot be hosted on the actual node where the data
resides, priority is given to nodes in the same rack. This reduces network
traffic on the main backbone network. If a TaskTracker fails or times out,
that part of the job is rescheduled. The TaskTracker on each node spawns a
separate Java Virtual Machine process to prevent the TaskTracker itself from
failing if the running job crashes its JVM. A heartbeat is sent from the
TaskTracker to the JobTracker every few minutes to check its status. The Job
Tracker and TaskTracker status and information is exposed by Jetty and can be
viewed from a web browser.

Known limitations of this approach are:

    The allocation of work to TaskTrackers is very simple. Every TaskTracker
has a number of available slots (such as "4 slots"). Every active map or
reduce task takes up one slot. The Job Tracker allocates work to the tracker
nearest to the data with an available slot. There is no consideration of the
current system load of the allocated machine, and hence its actual
availability.
    If one TaskTracker is very slow, it can delay the entire MapReduce
job—especially towards the end of a job, where everything can end up waiting
for the slowest task. With speculative execution enabled, however, a single
task can be executed on multiple slave nodes.

Scheduling

By default Hadoop uses FIFO scheduling, and optionally 5 scheduling priorities
to schedule jobs from a work queue.[31] In version 0.19 the job scheduler was
refactored out of the JobTracker, while adding the ability to use an alternate
scheduler (such as the Fair scheduler or the Capacity scheduler, described
next).[32]
Fair scheduler

The fair scheduler was developed by Facebook.[33] The goal of the fair
scheduler is to provide fast response times for small jobs and QoS for
production jobs. The fair scheduler has three basic concepts.[34]

    Jobs are grouped into pools.
    Each pool is assigned a guaranteed minimum share.
    Excess capacity is split between jobs.

By default, jobs that are uncategorized go into a default pool. Pools have to
specify the minimum number of map slots, reduce slots, and a limit on the
number of running jobs.
Capacity scheduler

The capacity scheduler was developed by Yahoo. The capacity scheduler supports
several features that are similar to the fair scheduler.[35]

    Queues are allocated a fraction of the total resource capacity.
    Free resources are allocated to queues beyond their total capacity.
    Within a queue a job with a high level of priority has access to the
queue's resources.

There is no preemption once a job is running.
Other applications

The HDFS file system is not restricted to MapReduce jobs. It can be used for
other applications, many of which are under development at Apache. The list
includes the HBase database, the Apache Mahout machine learning system, and
the Apache Hive Data Warehouse system. Hadoop can in theory be used for any
sort of work that is batch-oriented rather than real-time, is very
data-intensive, and benefits from parallel processing of data. It can also be
used to complement a real-time system, such as lambda architecture.

As of October 2009, commercial applications of Hadoop[36] included:

    Log and/or clickstream analysis of various kinds
    Marketing analytics
    Machine learning and/or sophisticated data mining
    Image processing
    Processing of XML messages
    Web crawling and/or text processing
    General archiving, including of relational/tabular data, e.g. for
compliance

Prominent users

On February 19, 2008, Yahoo! Inc. launched what it claimed was the world's
largest Hadoop production application. The Yahoo! Search Webmap is a Hadoop
application that runs on a Linux cluster with more than 10,000 cores and
produced data that was used in every Yahoo! web search query.[37] There are
multiple Hadoop clusters at Yahoo! and no HDFS file systems or MapReduce jobs
are split across multiple datacenters. Every Hadoop cluster node bootstraps
the Linux image, including the Hadoop distribution. Work that the clusters
perform is known to include the index calculations for the Yahoo! search
engine. In June of 2009, Yahoo! made the source code of the Hadoop version it
runs available to the public via the open-source community.[38]

In 2010, Facebook claimed that they had the largest Hadoop cluster in the
world with 21 PB of storage.[39] In June of 2012, they announced the data had
grown to 100 PB[40] and later that year they announced that the data was
growing by roughly half a PB per day.[41]

As of 2013, Hadoop adoption had become widespread: more than half of the
Fortune 50 used Hadoop.[42]
Hadoop hosting in the Cloud

Hadoop can be deployed in a traditional onsite datacenter as well as in the
cloud.[43] The cloud allows organizations to deploy Hadoop without hardware to
acquire or specific setup expertise.[44] Vendors who currently have an offer
for the cloud include Microsoft, Amazon, and Google.
Hadoop on Microsoft Azure

